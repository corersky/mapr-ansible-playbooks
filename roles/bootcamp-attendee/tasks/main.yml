---
  ## Instal bootcamp cluster for ATTENDEES

  # Set the clustername to demo.mapr.com
  - name: Change MapR Cluster Name to demo.mapr.com
    shell: "head -n 1 /opt/mapr/conf/mapr-clusters.conf | awk '{print $1}'"
    register: clustername

  - shell: "head -n 1 /opt/mapr/conf/mapr-clusters.conf | awk '{print $2}'"
    register: clustersecure

  - shell: "head -n 1 /opt/mapr/conf/mapr-clusters.conf | awk '{print $3}'"
    register: clustercldbnodes

  - debug:
      msg: "Current content of mapr-clusters.conf: {{clustername.stdout}} {{clustersecure.stdout}} {{clustercldbnodes.stdout}}"

  - debug:
      msg: "New content of mapr-clusters.conf: demo.mapr.com {{clustersecure.stdout}} {{clustercldbnodes.stdout}}"

  - shell: echo 'demo.mapr.com {{clustersecure.stdout}} {{clustercldbnodes.stdout}}'  > /opt/mapr/conf/mapr-clusters.conf

  # Configure the trainer.mapr.com cluster in mapr-clusters.conf to allow data replication
  - name: Add trainer.mapr.com to mapr-clusters.conf to allow data replication
    lineinfile: path=/opt/mapr/conf/mapr-clusters.conf line='trainer.mapr.com secure=false {{trainer_cluster_ip}}:7222' state=present

  # Set MAPR_SUBNETS
  - name: Set MAPR_SUBNETS
    lineinfile: path=/opt/mapr/conf/env.sh line='#export MAPR_SUBNETS={{ansible_default_ipv4.address}}/24' state=present

  # Download the MapR Data Science Refinery Container
  - name: Download the data-science-refinery container
    docker_image:
      name: maprtech/data-science-refinery
      state: present
      force: yes

  # Download the MapR PACC Image Classification Docker container
  - name: Download the mapr-pacc-image-classification container
    docker_image:
      name: mkieboom/mapr-pacc-image-classification
      state: present
      force: yes

  # Install the Minio Docker container
  - name: Remove the mapr-pacc-minio-docker container if it is already running
    docker_container:
      image: mkieboom/mapr-pacc-minio-docker
      name: mapr-pacc-minio-docker
      restart_policy: always
      state: present
      recreate: yes
      force_kill: yes

  - name: Launch the mapr-pacc-minio-docker container
    docker_container:
      image: mkieboom/mapr-pacc-minio-docker
      name: mapr-pacc-minio-docker
      restart_policy: always
      state: started
      recreate: yes
      force_kill: yes
      env:
        MAPR_CLUSTER={{cluster_name}}
        MAPR_CLDB_HOSTS={{ansible_default_ipv4.address}}
        MAPR_CONTAINER_USER={{mapr_user}}
        MAPR_CONTAINER_GROUP={{mapr_group}}
        MAPR_CONTAINER_UID={{mapr_user_uid}}
        MAPR_CONTAINER_GID={{mapr_group_gid}}
        MAPR_MOUNT_PATH=/mapr
        MINIO_ACCESS_KEY=myminioaccesskey
        MINIO_SECRET_KEY=myminiosecretkey
      devices:
        - "/dev/fuse"
      capabilities:
        - SYS_ADMIN
        - SYS_RESOURCE
      ports:
        - "9000:9000"


  # Install the Portainer Docker container
  - name: Remove the Portainer container if it is already running
    docker_container:
      image: portainer/portainer
      name: portainer
      restart_policy: always
      state: present
      recreate: yes
      force_kill: yes

  - name: Launch the Portainer container
    docker_container:
      image: portainer/portainer
      name: portainer
      restart_policy: always
      state: started
      recreate: yes
      force_kill: yes
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
        - "/portainer:/data"
      ports:
        - "9001:9000"


  # Install the Web-Filebrowser (elfinder) Docker container
  - name: Remove the Web-Filebrowser container if it is already running
    docker_container:
      image: mkieboom/mapr-pacc-finder-docker
      name: elfinder
      restart_policy: always
      state: present
      recreate: yes
      force_kill: yes

  - name: Launch the Web-Filebrowser (mapr-pacc-finder-docker) container
    docker_container:
      image: mkieboom/mapr-pacc-finder-docker
      name: elfinder
      restart_policy: always
      state: started
      recreate: yes
      force_kill: yes
      ports:
        - "8080:80"

  # Download the yolo image classification files and store the on MapR-FS
  - name: Download yolo image classification files
    get_url:
      url: "{{item}}"
      dest: "/tmp/"
      timeout: 900
    with_items:
    - "https://s3-eu-west-1.amazonaws.com/mkieboom/bootcamp/yolo/tiny-yolo-voc.cfg"
    - "https://s3-eu-west-1.amazonaws.com/mkieboom/bootcamp/yolo/tiny-yolo-voc.weights"
    - "https://s3-eu-west-1.amazonaws.com/mkieboom/bootcamp/yolo/yolo.cfg"
    - "https://s3-eu-west-1.amazonaws.com/mkieboom/bootcamp/yolo/yolo.weights"

  # Create yolo folder (using hadoop fs as /mapr might not be there)
  - name: Create the /yolo folder on MapR-FS (using hadoop fs as /mapr might not be there)
    shell: hadoop fs -mkdir -p /yolo

  # Upload the files to MapR-FS (using hadoop put as at this point in time /mapr/ might not be available yet)
  - name: Upload the yolo files to MapR-FS
    shell: hadoop fs -put -f {{item}} /yolo/
    with_items:
    - /tmp/tiny-yolo-voc.cfg
    - /tmp/tiny-yolo-voc.weights
    - /tmp/yolo.cfg
    - /tmp/yolo.weights

  # Create /zeppelin/shared-notebooks folder (using hadoop fs as /mapr might not be there)
  - name: Create /zeppelin/shared-notebooks folder (using hadoop fs as /mapr might not be there)
    shell: hadoop fs -mkdir -p /zeppelin/shared-notebooks
